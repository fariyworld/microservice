Java中自定义注解并通过反射获取注解属性值

1.定义自定义注解类

package com.mace.cloud.api.annotation;

import java.lang.annotation.*;

/**
 * description: 自定义注解类 controller 日志注解
 *
 * @Documented: 指明该注解可以用于生成doc
 * @Inherited： 该注解可以被自动继承
 * @Retention:  指明在什么级别显示该注解：
 *                  RetentionPolicy.SOURCE 注解存在于源代码中，编译时会被抛弃
 *                  RetentionPolicy.CLASS 注解会被编译到 class 文件中，但是 JVM 会忽略
 *                  RetentionPolicy.RUNTIME JVM 会读取注解，同时会保存到 class 文件中
 * @Target:     指明该注解可以注解的程序范围
 *                  ElementType.TYPE 用于描述类、接口(包括注解类型) 或enum声明
 *                  ElementType.FIELD 作用于字段，包含枚举值
 *                  ElementType.METHOD 作用于方法，不包含构造方法
 *                  ElementType.PARAMETER 作用于方法的参数
 *                  ElementType.CONSTRUCTOR 作用于构造方法
 *                  ElementType.LOCAL_VARIABLE 作用于本地变量或者catch语句
 *                  ElementType.ANNOTATION_TYPE 作用于注解
 *                  ElementType.PACKAGE 作用于包
 * <br />
 * Created by mace on 12:07 2018/7/2.
 */
@Target({ElementType.TYPE, ElementType.METHOD})//该注解作用于类和字段上
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface SystemControllerLog {

    String description()  default "controller"; //没有指定 defalut 的，需要在注解的时候显式指明
}


2.通过反射获取注解属性值

    public static void main(String[] args) {
        // 此处要用反射将字段中的注解解析出来
        Class<ReflectAnnotation> clz = ReflectAnnotation.class;
        // 判断类上是否有次注解
        boolean clzHasAnno = clz.isAnnotationPresent(FieldTypeAnnotation.class);
        if (clzHasAnno) {
            // 获取类上的注解
            FieldTypeAnnotation annotation = clz.getAnnotation(FieldTypeAnnotation.class);
            // 输出注解上的属性
            int age = annotation.age();
            String[] hobby = annotation.hobby();
            String type = annotation.type();
            System.out.println(clz.getName() + " age = " + age + ", hobby = " + Arrays.asList(hobby).toString() + " type = " + type);
        }
        // 解析字段上是否有注解
        // ps：getDeclaredFields会返回类所有声明的字段，包括private、protected、public，但是不包括父类的
        // getFields:则会返回包括父类的所有的public字段，和getMethods()一样
        Field[] fields = clz.getDeclaredFields();
        for(Field field : fields){
            boolean fieldHasAnno = field.isAnnotationPresent(FieldTypeAnnotation.class);
            if(fieldHasAnno){
                FieldTypeAnnotation fieldAnno = field.getAnnotation(FieldTypeAnnotation.class);
                //输出注解属性
                int age = fieldAnno.age();
                String[] hobby = fieldAnno.hobby();
                String type = fieldAnno.type();
                System.out.println(field.getName() + " age = " + age + ", hobby = " + Arrays.asList(hobby).toString() + " type = " + type);
            }
        }
        //解析方法上的注解
        Method[] methods = clz.getDeclaredMethods();
        for(Method method : methods){
            boolean methodHasAnno = method.isAnnotationPresent(MethodAnnotation.class);
            if(methodHasAnno){
                //得到注解
                MethodAnnotation methodAnno = method.getAnnotation(MethodAnnotation.class);
                //输出注解属性
                String desc = methodAnno.desc();
                System.out.println(method.getName() + " desc = " + desc);
            }
        }
    }


3. aop 多切点表达式

Pointcut可以有下列方式来定义或者通过 && || and or 的方式进行组合.

! not 取反


4. 切点表达式注意

@within和@target针对类的注解,@annotation是针对方法的注解


@Pointcut("@annotation(com.mace.cloud.api.annotation.SystemControllerLog)")
public void pt() {
}

带有@SystemControllerLog标注的所有类的任意方法.
@within(com.mace.cloud.api.annotation.SystemControllerLog)
@target(com.mace.cloud.api.annotation.SystemControllerLog)
带有@SystemControllerLog标注的任意方法.
@annotation(com.mace.cloud.api.annotation.SystemControllerLog)


//execution(* com.mace.cloud.controller..*.*(..))         controller 包及子包下的所有方法
//execution(public * com.mace.cloud.controller..*.*(..))  public 修饰的 controller 包及子包下的所有方法
//execution(public * com.mace.cloud..*Controller*.*(..))  包含 Controller 串的类

5. eureka 整合 api2doc
/api2doc/home.html
eureka.instance.status-page-url=http://localhost:${server.port}/api2doc/home.html # ${server.port}为该服务的端口号